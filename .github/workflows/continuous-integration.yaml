name: continuous-integration
run-name: '[CI] ${{ github.event.head_commit.message }}${{ github.event.pull_request.title }} by @${{ github.actor }}'

on:
    push:
        branches: [main]
    pull_request:
        # The branches below must be a subset of the branches above
        branches: [main]

concurrency:
    group: 'continuous-integration-${{ github.ref }}'
    cancel-in-progress: true

jobs:
    commit-quality:
        name: '[LINT] Commit quality'
        runs-on: ubuntu-latest
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
                with:
                    fetch-depth: 0
            -
                name: '[OSS] Launch commitlint'
                uses: wagoid/commitlint-github-action@481aff4de4d0de6d28d05533d4230d298ea3377d # v5.3.0
                with:
                    configFile: '.commitlintrc.json'

    github-action-quality:
        name: '[LINT] Github action quality'
        runs-on: ubuntu-latest
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
                with:
                    fetch-depth: 0
            -
                name: '[OSS / REVIEW DOG] Launch actionlint'
                uses: reviewdog/action-actionlint@326cc761d95c903f29a111a44888be707f912684 # v1.35.0
                with:
                    fail_on_error: true
                    github_token: ${{ secrets.GITHUB_TOKEN }}
                    level: 'error'
                    reporter: 'github-check'

#    javascript-quality:
#        name: '[LINT] Javascript quality'
#        runs-on: ubuntu-latest
#        steps:
#            -
#                name: '[GITHUB / OFFICIAL] Checkout'
#                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
#                with:
#                    fetch-depth: 0
#            -
#                name: '[INTERNAL] Install project & environment'
#                uses: ./.github/actions/install
#                with:
#                    architecture: x64
#                    node_version: 18
#            -
#                name: '[OSS / REVIEW DOG] Launch eslint'
#                uses: reviewdog/action-eslint@d3395027ea2cfc5cf8f460b1ea939b6c86fea656 # v1.17.0
#                with:
#                    eslint_flags: '--color --no-inline-config .eslintrc.json ./{__tests__,src}/**/*.js'
#                    fail_on_error: true
#                    github_token: ${{ secrets.GITHUB_TOKEN }}
#                    level: 'error'
#                    reporter: 'github-check'

    # @todo: should be launched by package
    markdown-quality:
        name: '[LINT] Markdown quality'
        runs-on: ubuntu-latest
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
                with:
                    fetch-depth: 0
            -
                name: '[OSS / REVIEW DOG] Launch markdownlint'
                uses: reviewdog/action-markdownlint@97e3df02fe1573d505a7b268046a44fa5409cbc3 # v0.9.0
                with:
                    fail_on_error: true
                    github_token: ${{ secrets.GITHUB_TOKEN }}
                    level: 'error'
                    markdownlint_flags: '. --config ./tools/lint/.markdownlint.json'
                    reporter: 'github-check'

    # @todo: should be launched by package
    code-quality:
        name: '[LINT] Code quality'
        runs-on: ubuntu-latest
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
                with:
                    fetch-depth: 0
            -
                name: '[GITHUB / OSS] Lint Code Base'
                uses: github/super-linter@bb2d833b08b6c288608686672b93a8a4589cdc49 # version 4.9.7
                env:
                    DEFAULT_BRANCH: 'main'
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    VALIDATE_ALL_CODEBASE: false
#                    VALIDATE_CSS: true
                    VALIDATE_ENV: true
                    VALIDATE_GITLEAKS: true

    # @todo: should be launched by package
    tests-with-jest:
        needs: [commit-quality, github-action-quality, markdown-quality, code-quality]
#        needs: [commit-quality, github-action-quality, javascript-quality, markdown-quality, code-quality]
        strategy:
            matrix:
                ARCHITECTURE: [x64]
                OS: [ubuntu-latest, macos-latest]
                NODE_VERSION: [16, 18]
        name: '[TEST] Jest - Node ${{ matrix.NODE_VERSION }} - ${{ matrix.ARCHITECTURE }} on ${{ matrix.OS }}'
        runs-on: ${{ matrix.OS }}
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
            -
                name: '[INTERNAL] Install project & environment'
                uses: ./.github/actions/install
                with:
                    architecture: ${{ matrix.ARCHITECTURE }}
                    node_version: ${{ matrix.NODE_VERSION }}
            -
                name: 'Launch build'
                shell: sh
                run: pnpm run --filter="@dragula2/core" build
            -
                name: 'Launch test'
                shell: sh
                run: pnpm run --filter="@dragula2/core" test:ci

    # @todo: should be launched by package
    tests-with-tape:
        needs: [commit-quality, github-action-quality, markdown-quality, code-quality]
#        needs: [commit-quality, github-action-quality, javascript-quality, markdown-quality, code-quality]
        strategy:
            matrix:
                ARCHITECTURE: [x64]
                OS: [ubuntu-latest, macos-latest]
                NODE_VERSION: [16, 18]
        name: '[TEST] Tape - Node ${{ matrix.NODE_VERSION }} - ${{ matrix.ARCHITECTURE }} on ${{ matrix.OS }}'
        runs-on: ${{ matrix.OS }}
        steps:
            -
                name: '[GITHUB / OFFICIAL] Checkout'
                uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
            -
                name: '[INTERNAL] Install project & environment'
                uses: ./.github/actions/install
                with:
                    architecture: ${{ matrix.ARCHITECTURE }}
                    node_version: ${{ matrix.NODE_VERSION }}
            -
                name: '[For UbuntuOS] Install xvfb'
                if: matrix.OS == 'ubuntu-latest'
                run: sudo apt-get install xvfb
            -
                name: 'Launch build'
                shell: sh
                run: pnpm run --filter="@dragula2/core" build
            -
                name: '[For UbuntuOS] Launch test'
                if: matrix.OS == 'ubuntu-latest'
                shell: sh
                run: xvfb-run --auto-servernum pnpm run --filter="@dragula2/core" test:old
            -
                name: 'Launch test'
                if: matrix.OS != 'ubuntu-latest'
                shell: sh
                run: pnpm run --filter="@dragula2/core" test:old

    tests-end:
        needs: [tests-with-jest, tests-with-tape]
        name: '[TEST] Is it a success?'
        runs-on: ubuntu-latest
        if: ${{ always() }}
        steps:
            -
                name: 'Tests OK'
                if: ${{ needs.tests-with-jest.result == 'success' && needs.tests-with-tape.result == 'success' }}
                shell: sh
                run: exit 0
            -
                name: 'Tests KO'
                if: ${{ needs.tests-with-jest.result != 'success' || needs.tests-with-tape.result != 'success' }}
                shell: sh
                run: exit 1
